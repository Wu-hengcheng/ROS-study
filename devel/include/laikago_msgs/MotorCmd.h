// Generated by gencpp from file laikago_msgs/MotorCmd.msg
// DO NOT EDIT!


#ifndef LAIKAGO_MSGS_MESSAGE_MOTORCMD_H
#define LAIKAGO_MSGS_MESSAGE_MOTORCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laikago_msgs
{
template <class ContainerAllocator>
struct MotorCmd_
{
  typedef MotorCmd_<ContainerAllocator> Type;

  MotorCmd_()
    : mode(0)
    , position(0.0)
    , velocity(0.0)
    , positionStiffness(0.0)
    , velocityStiffness(0.0)
    , torque(0.0)  {
    }
  MotorCmd_(const ContainerAllocator& _alloc)
    : mode(0)
    , position(0.0)
    , velocity(0.0)
    , positionStiffness(0.0)
    , velocityStiffness(0.0)
    , torque(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef float _position_type;
  _position_type position;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _positionStiffness_type;
  _positionStiffness_type positionStiffness;

   typedef float _velocityStiffness_type;
  _velocityStiffness_type velocityStiffness;

   typedef float _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::laikago_msgs::MotorCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laikago_msgs::MotorCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCmd_

typedef ::laikago_msgs::MotorCmd_<std::allocator<void> > MotorCmd;

typedef boost::shared_ptr< ::laikago_msgs::MotorCmd > MotorCmdPtr;
typedef boost::shared_ptr< ::laikago_msgs::MotorCmd const> MotorCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laikago_msgs::MotorCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laikago_msgs::MotorCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::laikago_msgs::MotorCmd_<ContainerAllocator1> & lhs, const ::laikago_msgs::MotorCmd_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.positionStiffness == rhs.positionStiffness &&
    lhs.velocityStiffness == rhs.velocityStiffness &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::laikago_msgs::MotorCmd_<ContainerAllocator1> & lhs, const ::laikago_msgs::MotorCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace laikago_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::laikago_msgs::MotorCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laikago_msgs::MotorCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laikago_msgs::MotorCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laikago_msgs::MotorCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laikago_msgs::MotorCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laikago_msgs::MotorCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laikago_msgs::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bbe425e3cd73a40e74b88b2f03b321c";
  }

  static const char* value(const ::laikago_msgs::MotorCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bbe425e3cd73a40ULL;
  static const uint64_t static_value2 = 0xe74b88b2f03b321cULL;
};

template<class ContainerAllocator>
struct DataType< ::laikago_msgs::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laikago_msgs/MotorCmd";
  }

  static const char* value(const ::laikago_msgs::MotorCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laikago_msgs::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 mode                  # motor target mode\n"
"float32 position           # motor target position\n"
"float32 velocity           # motor target velocity\n"
"float32 positionStiffness  # motor spring stiffness coefficient\n"
"float32 velocityStiffness  # motor damper coefficient\n"
"float32 torque             # motor target torque\n"
;
  }

  static const char* value(const ::laikago_msgs::MotorCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laikago_msgs::MotorCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.positionStiffness);
      stream.next(m.velocityStiffness);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laikago_msgs::MotorCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laikago_msgs::MotorCmd_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "positionStiffness: ";
    Printer<float>::stream(s, indent + "  ", v.positionStiffness);
    s << indent << "velocityStiffness: ";
    Printer<float>::stream(s, indent + "  ", v.velocityStiffness);
    s << indent << "torque: ";
    Printer<float>::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAIKAGO_MSGS_MESSAGE_MOTORCMD_H
